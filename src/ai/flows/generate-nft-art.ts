// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Generates NFT art based on a text description.
 *
 * - generateNftArt - A function that generates NFT art.
 * - GenerateNftArtInput - The input type for the generateNftArt function.
 * - GenerateNftArtOutput - The return type for the generateNftArt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNftArtInputSchema = z.object({
  nftDescription: z
    .string()
    .describe('A description of the NFT to generate art for.'),
});
export type GenerateNftArtInput = z.infer<typeof GenerateNftArtInputSchema>;

const GenerateNftArtOutputSchema = z.object({
  nftImageDataUri: z
    .string()
    .describe(
      'The generated NFT art as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' /* data-uri */
    ),
});
export type GenerateNftArtOutput = z.infer<typeof GenerateNftArtOutputSchema>;

export async function generateNftArt(input: GenerateNftArtInput): Promise<GenerateNftArtOutput> {
  return generateNftArtFlow(input);
}

const generateNftArtPrompt = ai.definePrompt({
  name: 'generateNftArtPrompt',
  input: {schema: GenerateNftArtInputSchema},
  output: {schema: GenerateNftArtOutputSchema},
  prompt: `Generate an image for the NFT based on the following description: {{{nftDescription}}}. The image should be visually appealing and unique.`,
});

const generateNftArtFlow = ai.defineFlow(
  {
    name: 'generateNftArtFlow',
    inputSchema: GenerateNftArtInputSchema,
    outputSchema: GenerateNftArtOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      // IMPORTANT: ONLY the googleai/gemini-2.0-flash-exp model is able to generate images. You MUST use exactly this model to generate images.
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: input.nftDescription,
      config: {
        responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
      },
    });

    return {nftImageDataUri: media.url!};
  }
);
