// This is an autogenerated file from Firebase Studio.
"use server";
/**
 * @fileOverview Generates a unique and visually appealing image data URI for each Loot Box.
 *
 * - generateLootBoxImage - A function that handles the loot box image generation process.
 * - GenerateLootBoxImageInput - The input type for the generateLootBoxImage function.
 * - GenerateLootBoxImageOutput - The return type for the generateLootBoxImage function.
 */

import { ai } from "@/ai/genkit";
import { z } from "genkit";

const GenerateLootBoxImageInputSchema = z.object({
  theme: z
    .string()
    .describe(
      "The theme of the loot box image. Examples: futuristic, medieval, cyberpunk."
    ),
  contentDescription: z
    .string()
    .describe("A description of the contents inside the loot box."),
});
export type GenerateLootBoxImageInput = z.infer<
  typeof GenerateLootBoxImageInputSchema
>;

const GenerateLootBoxImageOutputSchema = z.object({
  imageDataUri: z // Changed from imageUrl to imageDataUri
    .string()
    .describe(
      "The generated image data URI for the loot box. Format: 'data:<mimetype>;base64,<encoded_data>'. The client will upload this to Edgestore."
    ),
});
export type GenerateLootBoxImageOutput = z.infer<
  typeof GenerateLootBoxImageOutputSchema
>;

export async function generateLootBoxImage(
  input: GenerateLootBoxImageInput
): Promise<GenerateLootBoxImageOutput> {
  return generateLootBoxImageFlow(input);
}

// Prompt definition is implicit in the ai.generate call for this simpler flow

const generateLootBoxImageFlow = ai.defineFlow(
  {
    name: "generateLootBoxImageFlow",
    inputSchema: GenerateLootBoxImageInputSchema,
    outputSchema: GenerateLootBoxImageOutputSchema,
  },
  async (input) => {
    const { media } = await ai.generate({
      model: "googleai/gemini-2.0-flash-exp",
      prompt: `Generate an image of a loot box with the following characteristics:

Theme: ${input.theme}
Content Description: ${input.contentDescription}`,
      config: {
        responseModalities: ["TEXT", "IMAGE"],
      },
    });

    if (!media || !media.url) {
      throw new Error("Failed to generate image: No media data URI returned");
    }
    
    // This flow now returns the data URI directly.
    // The client-side code (e.g., in page.tsx) will handle uploading this data URI to Edgestore.
    return { imageDataUri: media.url };
  }
);
